namespace Atomation.GameMap;

using Godot;

public abstract class Generator<ValueType>
{
    protected float min;
    protected float max;

    protected Vector2I genSize;
    protected Vector2I totalSize;

    protected Vector2 genOffset;

    protected Generator()
    {
        min = 10;
        max = -10;
        genOffset = Vector2I.Zero;
        SetSize();
        SetTotalSize();
    }

    /// <summary>
    /// sets generators offset
    /// </summary>
    public virtual void SetOffset(Vector2 offset)
    {
        genOffset = offset;
    }

    /// <summary> 
    /// sets generators size 
    /// </summary>
    public virtual void SetSize(Vector2I size = default)
    {
        if (size == default)
        {
            genSize = new Vector2I(Chunk.CHUNK_SIZE, Chunk.CHUNK_SIZE);
            return;
        }
        genSize = size;
    }

    /// <summary> 
    /// sets the total
    /// </summary>
    public virtual void SetTotalSize(Vector2I size = default)
    {
        if (size == default)
        {
            totalSize = Vector2I.One;
            return;
        }

        size.X = (size.X == 0) ? 1 : size.X;
        size.Y = (size.Y == 0) ? 1 : size.Y;

        totalSize = size;
    }

    /// <summary> 
    /// compares given value with generators Max, 
    /// and updates max if given value is higher 
    /// </summary>
    protected void SetMax(float val)
    {
        if (val > max)
        {
            max = val;
        }
    }

    /// <summary> 
    /// compares given value with generators Min, 
    /// and updates Min if given value is lower 
    /// </summary>
    protected void SetMin(float val)
    {
        if (val < min)
        {
            min = val;
        }
    }

    /// <summary>
    /// runs before generation to ensure generators valid
    /// Ie settings and everything else needed is set
    /// </summary>
    protected virtual bool Validate(){
        GD.PushError("Validation process not implemented");
        return false;
    }

    /// <summary> 
    /// runs the generator and returns the outcome
    /// </summary>
    public virtual ValueType[,] Run(Vector2 offset = default, Vector2I size = default)
    {
        GD.PushError("Generate is not implemented");
        return default;
    }

    /// <summary> 
    /// outputs the lowest and height values generated by the generator
    /// </summary>
    public virtual void PrintMinMax()
    {
        GD.Print($"Generators min: {min} max: {max}");
    }

    /// <summary>
    /// gets the generators offset
    /// </summary>
    public Vector2 GetOffset()
    {
        return genOffset;
    }

    /// <summary>
    /// get value from generator at provided cords
    /// </summary>
    public virtual ValueType GetValue(int x, int y)
    {
        GD.PushError("Get Value is not implemented");
        return default;
    }

    /// <summary>
    /// returns a map of values which are the result form the generator
    /// </summary>
    public virtual ValueType[,] GetMap()
    {
        return default;
    }

    /// <summary>
    /// clears the generators maps
    /// </summary>
    public virtual void Clear(){
        GD.PushError("Clearing is not implemented");

    }
}